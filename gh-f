#!/usr/bin/env bash
set -e

VERSION="gh-f 1.7.0"

ID_COLOUR="\033[36m"
TEXT_COLOUR="\033[34m"
STATUS_COLOUR="\033[33m"
SHELL_COLOUR="\033[0m"
[[ -z $(command -v bat) ]] && HELP_PAGER="less -R" || HELP_PAGER="bat -l man -p"
[[ -z $(command -v bat) ]] && LOG_PAGER="less -R" || LOG_PAGER="bat -l log -p"

help() {
	help_message="
gh f [cmd]

COMMANDS
  -a|adds: add to staging area
  -r|runs: show github workflow runs and filter logs
  -g|greps: grep in files in revision history
  -p|prs: view, diff and checkout open PR
  -b|branches: checkout and diff branches
  -d|diffs: diff files by extension
  -l|logs: select commits and show diff
  -t|tags: checkout and diff version tags
  -R|releases: show and diff github releases
  -s|search: search issues in any repository
  -m|myissue: search issues you opened somewhere
  -k|pick: cherrypick files from one branch to the other
  -e|envs: show git config list
  -h|help: show this help message
  -V|version: show the current version

USAGE
  gh f -a | gh f adds

	multi-file selection with tab
	enter: add selected files to staging area
	ctrl-d: diff selected files

  gh f -r | gh f runs

	enter: search the selected run logs
	exits if no runs exist

  gh f -g | gh f greps

    prompt for pattern or pass regex as positional argument
    select files whose revisions contain pattern
    show pattern in revision history
    enter: show file at point in time of revision

  gh f -p | gh f prs

    manage open PRs

	enter: checkout the PR
	ctrl-d: diff the PR
	ctrl-v: view the PR

  gh f -b | gh f branches

	enter: checkout the branch (track if remote)
	ctrl-d: diff the branch
	ctrl-s: triple dot diff: <branch>...HEAD
	ctrl-x: delete the branch (prompt for confirmation)

  gh f -d | gh f diffs

	prompt file extension to select
	enter: add all files with selected extension
	ctrl-d: diff all files with selected extension
	ctrl-x: checkout all files with selected extension

  gh f -l | gh f logs

	file paths can be passed as positional arguments
  	enter: checkout selected commit
	ctrl-d: diff selected commit against current branch
	ctrl-v: view commit patch

  gh f -t | gh f tags

  	enter: checkout the tag in detached HEAD state
	ctrl-d: diff the tag against current branch
	ctrl-v: show commit the tag points to

  gh f -R | gh f releases

  	enter: checkout the release tag in detached HEAD state
	ctrl-d: diff the release tag against current branch
	ctrl-v: show commit the release tag points to

  gh f -s | gh f search

  	prompt for repository name and issue title
	enter: view selected issue

  gh f -m | gh f myissue

  	prompt for repository name
	enter: view selected issue

  gh f -k | gh f pick

  	prompt for branch and file to cherrypick
	only show files that are present on both branches
	multi-file selection with tab
	enter: confirm branch and pick files

  gh f -e | gh f envs

  	show git config --list of environment variables
	for the current git project

CUSTOMISATION

  The prompt colours are defined via their ANSI sequences: if you like different ones you
  may change them yourself in the source code.

  The pager that is used for git diff and logs is defined in your own gitconfig, therefore
  independent of this extension. For runs and help page we default to bat or to less -R if
  the former is not detected in your system.

"
	echo "$help_message" | $HELP_PAGER
}

is_remote() {
	[ ! "$(git ls-remote --heads origin 2>/dev/null | wc -l | tr -s ' ')" -eq 0 ]
}

is_git_repo() {
	[ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" = "true" ]
}

adds() {
	if ! is_git_repo; then {
		echo "not a git repo"
		exit
	}; fi
	unstaged_list="$(git ls-files . --exclude-standard --others -m)"

	if [[ -n "$unstaged_list" ]]; then
		lines="$(
			echo "$unstaged_list" |
				fzf -d' ' \
					--exit-0 \
					--ansi --delimiter=: \
					--multi \
					--ghost="add files:" \
					--bind="focus:transform-footer:GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS git diff --stat --color=always -- {1} __NOVAR__" \
					--expect="enter,ctrl-d" \
					--header=$'Enter: add file(s), Ctrl-d: diff file(s)\n\n' \
					--no-info

		)"

		key="$(head -1 <<<"$lines")"
		files="$(sed 1d <<<"$lines" | cut -d: -f2 | tr -d ' ')"

		case "$key" in
		enter) echo "$files" | xargs -n1 -t git add ;;
		ctrl-d) echo "$files" | xargs -n1 git diff ;;
		esac

	else
		echo "no files to stage"
		exit
	fi
}

runs() {
	if ! is_remote; then {
		echo "no gh remote found"
		exit
	}; fi
	lines="$(
		gh run list -L100 | awk -F'\t' -v ID_COLOUR="$ID_COLOUR" -v TEXT_COLOUR="$TEXT_COLOUR" -v STATUS_COLOUR="$STATUS_COLOUR" -v SHELL_COLOUR="$SHELL_COLOUR" \
			'{print ID_COLOUR $7 SHELL_COLOUR": " TEXT_COLOUR $4 STATUS_COLOUR" ("$2")"}' |
			fzf -d' ' \
				--exit-0 \
				--ansi --delimiter=: \
				--ghost="select run" \
				--preview='GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS gh run view -v {1}' \
				--expect="enter,ctrl-v,ctrl-o" \
				--header=$'Enter: view run, Ctrl-v: view logs, Ctrl-o: view on web\n\n' \
				--no-info
	)"

	key="$(head -1 <<<"$lines")"
	run_id="$(sed 1d <<<"$lines" | cut -d: -f1)"

	case "$key" in
	enter) gh run view -v "$run_id" ;;
	ctrl-v) gh run view --log "$run_id" | $LOG_PAGER ;;
	ctrl-o) gh run view -w "$run_id" ;;
	esac
}

greps() {
	if ! is_git_repo; then {
		echo "not a git repo"
		exit
	}; fi
	if [[ $# -eq 0 ]]; then
		read -rp "search regex: " regex
	else
		regex="$*"
	fi
	[[ -z "$regex" ]] && exit

	revision_files="$(git rev-list --all | xargs git grep "$regex" | awk -F':' '{print $2}' | sort -u)"
	[[ -z "$revision_files" ]] && {
		echo "no files containing $regex"
		return
	}
	selected_file="$(
		echo "$revision_files" |
			fzf -d' ' \
				+s \
				--ansi \
				--ghost='file name' \
				--footer="search regex: $regex"
	)"

	revision="$(
		git rev-list --all --date-order -- $selected_file | xargs -I {} git grep "$regex" {} -- $selected_file |
			awk -F':' -v ID_COLOUR="$ID_COLOUR" '{print ID_COLOUR $1}' | uniq |
			fzf -d' ' \
				+s \
				--exit-0 \
				--ansi \
				--ghost="select commit" \
				--footer="search regex: $regex in $selected_file" \
				--preview="git show {}:$selected_file | grep -n -C1 --color=always \"$regex\""
	)"
	git show "$revision":$selected_file
	printf '\ncommit: %s\nfile: %s\n' "$revision" "$selected_file"
}

prs() {
	if ! is_remote; then {
		echo "no gh remote found"
		exit
	}; fi
	open_prs="$(gh pr list "$@" -s"open")"

	if [[ -n "$open_prs" ]]; then

		lines="$(
			echo "$open_prs" | awk -F'\t' -v ID_COLOUR="$ID_COLOUR" -v TEXT_COLOUR="$TEXT_COLOUR" -v SHELL_COLOUR="$SHELL_COLOUR" \
				'{print ID_COLOUR $1 SHELL_COLOUR": " TEXT_COLOUR $3}' |
				fzf -d' ' \
					--exit-0 \
					--ansi --delimiter=: \
					--ghost="select PR" \
					--preview='GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS gh pr view {1}' \
					--expect="enter,ctrl-d,ctrl-v" \
					--header=$'Enter: checkout PR, Ctrl-d: diff PR, Ctrl-v: view PR\n\n' \
					--no-info

		)"

		key="$(head -1 <<<"$lines")"
		id="$(sed 1d <<<"$lines" | cut -d: -f1)"

		case "$key" in
		enter) gh pr checkout "$id" ;;
		ctrl-d) gh pr diff "$id" ;;
		ctrl-v) gh pr view "$id" ;;
		esac

	else
		echo "no open PRs"
		exit
	fi
}

branches() {
	if ! is_git_repo; then {
		echo "not a git repo"
		exit
	}; fi
	lines="$(
		git branch -a --sort=-committerdate | sed 's/[* ]//g' | grep -v 'HEAD' |
			fzf -d' ' \
				--ghost="select branch" \
				--preview="git log --oneline --format='%C(bold blue)%h%C(reset) - %C(green)%ar%C(reset) - %C(cyan)%an%C(reset)%C(bold yellow)%d%C(reset): %s' --color=always {}" \
				--expect "enter,ctrl-d,ctrl-s,ctrl-x" \
				--header=$'Enter: checkout, Ctrl-d: diff branch, Ctrl-s: triple dot diff, Ctrl-x: delete branch\n\n' \
				--no-info
	)"

	key="$(head -1 <<<"$lines")"
	branch="$(sed '1d;s/remotes\///g' <<<"$lines")"

	case "$key" in
	enter) if [[ $branch == *"origin"* ]]; then git checkout --track "$branch"; else git checkout "$branch"; fi ;;
	ctrl-d) echo "$branch <-> $(git branch --show-current)" && git diff "$branch" ;;
	ctrl-s) echo "$branch <-> $(git branch --show-current)" && git diff "$branch"...HEAD ;;
	ctrl-x)
		read -rp "Delete branch \"$branch\"? [y|n] "
		if [[ $REPLY =~ ^[Yy]$ ]]; then git branch -D "$branch"; fi
		;;
	esac

}

diffs() {
	if ! is_git_repo; then {
		echo "not a git repo"
		exit
	}; fi
	lines="$(
		git diff --name-only | awk -F'.' '{print $NF}' | sort -u |
			fzf -d' ' \
				--no-multi \
				--exit-0 \
				--ghost="select extension:" \
				--preview="GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS git diff --stat --color=always -- '*.{1}'" \
				--expect="enter,ctrl-d,ctrl-x" \
				--header=$'Enter: add file(s), Ctrl-d: diff file(s), Ctrl-x: checkout file(s)\n\n' \
				--no-info
	)"

	key="$(head -1 <<<"$lines")"
	extension="$(sed 1d <<<"$lines" | cut -d: -f2 | tr -d ' ')"

	case "$key" in
	enter) git diff --name-only | grep ".*\.$extension" | xargs -n 1 -t git add ;;
	ctrl-d) git diff -- "*.$extension" ;;
	ctrl-x) git diff --name-only | grep ".*\.$extension" | xargs -n 1 -t git checkout ;;
	esac
}

logs() {
	if ! is_git_repo; then {
		echo "not a git repo"
		exit
	}; fi
	lines="$(
		git log --oneline --color=always "$@" |
			fzf -d' ' \
				+s \
				--ansi \
				--ghost="select commit" \
				--preview="git show --stat --abbrev-commit {1} --format='%C(bold blue)%h%C(reset) - %C(green)%ar%C(reset): %C(cyan)%an%C(reset)%C(bold yellow)%d%C(reset)' --color=always" \
				--expect="enter,ctrl-d,ctrl-v" \
				--header=$'Enter: checkout, Ctrl-d: diff, Ctrl-v: view commit patch\n\n' \
				--no-info

	)"

	key="$(head -1 <<<"$lines")"
	commit="$(sed 1d <<<"$lines" | cut -d ' ' -f1 | tr -d ' ')"

	case "$key" in
	enter) git checkout "$commit" ;;
	ctrl-d) git diff "$commit" ;;
	ctrl-v) git show "$commit" ;;
	esac
}

tags() {
	if ! is_git_repo; then {
		echo "not a git repo"
		exit
	}; fi
	lines="$(
		git tag -l -n --sort=-version:refname | awk -F' ' -v ID_COLOUR="$ID_COLOUR" -v TEXT_COLOUR="$TEXT_COLOUR" -v SHELL_COLOUR="$SHELL_COLOUR" '{first = $1; $1=""; print ID_COLOUR first SHELL_COLOUR" :" TEXT_COLOUR $0}' | sed 's/^ //g' |
			fzf -d' ' \
				--exit-0 \
				--ansi --delimiter=: \
				--ghost="select tag" \
				--preview="GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS git diff --stat --color=always {1} 2>/dev/null" \
				--expect="enter,ctrl-d,ctrl-v" \
				--header=$'Enter: checkout tag, Ctrl-d: diff tag, Ctrl-v: view tag commit\n\n' \
				--no-info \
				--no-sort
	)"

	key="$(head -1 <<<"$lines")"
	tag="$(sed 1d <<<"$lines" | cut -d ':' -f1 | tr -d ' ')"

	case "$key" in
	enter) git checkout tags/"$tag" ;;
	ctrl-d) git diff "$tag" ;;
	ctrl-v) git log -1 tags/"$tag" ;;
	esac
}

releases() {
	if ! is_remote; then {
		echo "no gh remote found"
		exit
	}; fi

	lines="$(
		gh release list -L100 | awk -F'\t' -v TEXT_COLOUR="$TEXT_COLOUR" -v SHELL_COLOUR="$SHELL_COLOUR" '{print TEXT_COLOUR $3 SHELL_COLOUR": " substr($4,1,10)}' |
			fzf -d' ' \
				--exit-0 \
				--ansi --delimiter=: \
				--ghost="select release" \
				--preview="GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS git diff --stat --color=always {1} 2>/dev/null" \
				--expect="enter,ctrl-d,ctrl-v" \
				--header=$'Enter: checkout tag, Ctrl-d: diff tag, Ctrl-v: view tag commit\n\n' \
				--no-info \
				--no-sort
	)"

	key="$(head -1 <<<"$lines")"
	tag="$(sed 1d <<<"$lines" | cut -d: -f1 | tr -d ' ')"

	case "$key" in
	enter) git checkout tags/"$tag" ;;
	ctrl-d) git diff "$tag" ;;
	ctrl-v) gh release view "$tag" ;;
	esac
}

search() {
	read -rp "repository name: " repo
	[[ -z $repo ]] && exit
	read -rp "search: " search
	[[ -z $search ]] && exit
	issue_list="$(gh issue list -s"all" -R "$repo" -L 300 -S"$search")"

	if [[ -n $issue_list ]]; then
		issue="$(
			echo "$issue_list" | awk -F'\t' -v ID_COLOUR="$ID_COLOUR" -v TEXT_COLOUR="$TEXT_COLOUR" -v STATUS_COLOUR="$STATUS_COLOUR" -v SHELL_COLOUR="$SHELL_COLOUR" \
				'{print ID_COLOUR $1 SHELL_COLOUR": " TEXT_COLOUR $3 SHELL_COLOUR" - " STATUS_COLOUR $2}' |
				fzf -d' ' \
					--ansi \
					--ghost="select issue"
		)"
	else
		echo "$search not found in $repo"
		exit
	fi

	[[ -n $issue ]] && cut -f1 -d: <<<"$issue" | xargs -n1 gh issue view -R "$repo" -c
}

myissue() {
	read -rp "repository name: " repo
	[[ -z $repo ]] && exit
	issue_list="$(gh issue list -s"all" -R "$repo" -A @me)"

	if [[ -n $issue_list ]]; then
		issue="$(echo "$issue_list" | awk -F'\t' -v ID_COLOUR="$ID_COLOUR" -v TEXT_COLOUR="$TEXT_COLOUR" -v STATUS_COLOUR="$STATUS_COLOUR" -v SHELL_COLOUR="$SHELL_COLOUR" \
			'{print ID_COLOUR $1 SHELL_COLOUR": " TEXT_COLOUR $3 SHELL_COLOUR" - " STATUS_COLOUR $2}' |
			fzf -d' ' \
				--ansi \
				--ghost="select issue")"
	else
		echo "no issue found in $repo"
		exit
	fi

	[[ -n $issue ]] && cut -f1 -d: <<<"$issue" | xargs -n1 gh issue view -R "$repo" -c
}

pick() {
	if ! is_git_repo; then {
		echo "not a git repo"
		exit
	}; fi
	if [ "$(git branch | wc -l | tr -d ' ')" -eq 1 ]; then {
		echo "no alternate branch to pick from"
		exit
	}; fi
	from_branch=$(git branch | fzf -d' ' --ghost="pick from branch" --no-info | tr -d ' ')
	[[ -n "$from_branch" ]] && files="$(git diff --name-only --diff-filter=M "$from_branch" |
		fzf -d' ' \
			--multi \
			--select-1 \
			--exit-0 \
			--preview="GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS git diff --stat --color=always $from_branch {1} 2>/dev/null" \
			--ghost="select files:")" || echo "no branch selected"

	[[ -n ${files} ]] && git restore --source "${from_branch}" ${files}
}

envs() {
	config_var=$(git config --list | cut -d= -f1 | fzf -d' ' --ghost 'select value' --no-info --bind 'focus:transform-footer:git config {}')
	[[ -n "$config_var" ]] && git config "$config_var"
}

# print help page
[[ "$#" -eq 0 ]] && help

while [[ "$#" -gt 0 ]]; do
	case $1 in
	-h | --help | help)
		help
		shift
		;;
	-a | adds)
		adds
		shift
		;;
	-r | runs)
		runs
		shift
		;;
	-g | greps)
		shift
		greps "$@"
		shift
		;;
	-p | prs)
		shift
		prs "$@"
		shift
		;;
	-b | branches)
		branches
		shift
		;;
	-d | diffs)
		diffs
		shift
		;;
	-l | logs)
		shift
		logs "$@"
		shift
		;;
	-t | tags)
		tags
		shift
		;;
	-R | releases)
		releases
		shift
		;;
	-s | search)
		search
		shift
		;;
	-m | myissue)
		myissue
		shift
		;;
	-k | pick)
		pick
		shift
		;;
	-e | envs)
		envs
		shift
		;;
	-V | version)
		echo "$VERSION"
		shift
		;;
	*) help ;;
	esac
	shift
done
